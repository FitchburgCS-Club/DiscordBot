plugins {
    id 'java'
    id 'application'
}

group 'com.fsucsc.discordbot'
/*
Sets manifest version to first 8 chars of commit hash
It first reads .git/HEAD to determine the branch (even though deployed versions should almost always be on master), and gets something like
ref: refs/heads/master
It splits by space to grab the filename and opens that to grab the hash
*/
version rootProject.file(".git/" + rootProject.file('.git/HEAD').text.trim().split(' ')[1]).text[0..7].trim();

sourceCompatibility = JavaVersion.VERSION_15

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile('net.dv8tion:JDA:4.2.0_168')
    compile('org.im4java:im4java:1.4.0')
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Version': version,
                'Main-Class': 'com.fsucsc.discordbot.Bot'
    }
    /*
    (Zack): Code the runs through all the things that need to go into the jar.
    If it's a directory, it just puts it in, if it's a jar, it unzips it, if it's neither
    it just puts it in.
     */
    archiveFileName = project.name + ".jar"
    from {
        configurations.compile.collect {
            if (it.isDirectory()) {
                it
            } else {
                //(Zack): split actually takes in a regex, so it needs two slashes to properly escape the '.'
                //(Zack): Not sure if anything will ever be a zip as opposed to a jar, but the code will handle it nonetheless
                if (it.name.split("\\.")[-1] == "jar" || it.name.split("\\.")[-1] == "zip") {
                    zipTree(it)
                } else {
                    it
                }
            }
        }
    }
    with jar
}

application {
    mainClassName = 'com.fsucsc.discordbot.Bot'
}
